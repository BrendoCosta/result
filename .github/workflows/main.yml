name: build

on: [push, pull_request]

jobs:
  ci:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}

    env:
      CMAKE_GENERATOR: Ninja
      CTEST_OUTPUT_ON_FAILURE: ON
      CTEST_PARALLEL_LEVEL: 2

    strategy:
      fail-fast: false
      matrix:
        # Github Actions requires a single row to be added to the build matrix.
        # See https://help.github.com/en/articles/workflow-syntax-for-github-actions.
        name: [
          ubuntu-18.04-gcc-5,
          ubuntu-18.04-gcc-6,
          ubuntu-18.04-gcc-7,
          ubuntu-18.04-gcc-8,
          ubuntu-18.04-gcc-9,
          ubuntu-18.04-gcc-10,
          ubuntu-18.04-clang-3.5,
          ubuntu-18.04-clang-3.6,
          ubuntu-18.04-clang-3.7,
          ubuntu-18.04-clang-3.8,
          ubuntu-18.04-clang-3.9,
          ubuntu-18.04-clang-4.0,
          ubuntu-18.04-clang-5.0,
          ubuntu-18.04-clang-6.0,
          ubuntu-18.04-clang-7,
          ubuntu-18.04-clang-8,
          ubuntu-18.04-clang-9,
          ubuntu-18.04-clang-10,
          # windows-latest-cl-vs2015,
          # windows-latest-cl-vs2017,
          # windows-latest-cl-vs2019,
          # windows-latest-clang-cl,
          # windows-latest-clang,
          # windows-latest-gcc,
          macOS-latest-xcode-10.3,
          macOS-latest-xcode-11.2,
          macOS-latest-xcode-11.3,
          macOS-latest-xcode-12.3,
        ]

        include:

          # Linux

          - name: ubuntu-18.04-gcc-5
            os: ubuntu-18.04
            compiler: gcc
            version: "5"

          - name: ubuntu-18.04-gcc-6
            os: ubuntu-18.04
            compiler: gcc
            version: "6"

          - name: ubuntu-18.04-gcc-7
            os: ubuntu-18.04
            compiler: gcc
            version: "7"

          - name: ubuntu-18.04-gcc-8
            os: ubuntu-18.04
            compiler: gcc
            version: "8"

          - name: ubuntu-18.04-gcc-9
            os: ubuntu-18.04
            compiler: gcc
            version: "9"

          - name: ubuntu-18.04-gcc-10
            os: ubuntu-18.04
            compiler: gcc
            version: "10"

          - name: ubuntu-18.04-clang-3.5
            os: ubuntu-18.04
            compiler: clang
            version: "3.5"

          - name: ubuntu-18.04-clang-3.6
            os: ubuntu-18.04
            compiler: clang
            version: "3.6"

          - name: ubuntu-18.04-clang-3.7
            os: ubuntu-18.04
            compiler: clang
            version: "3.7"

          - name: ubuntu-18.04-clang-3.8
            os: ubuntu-18.04
            compiler: clang
            version: "3.8"

          - name: ubuntu-18.04-clang-3.9
            os: ubuntu-18.04
            compiler: clang
            version: "3.9"

          - name: ubuntu-18.04-clang-4.0
            os: ubuntu-18.04
            compiler: clang
            version: "4.0"

          - name: ubuntu-18.04-clang-5.0
            os: ubuntu-18.04
            compiler: clang
            version: "5.0"

          - name: ubuntu-18.04-clang-6.0
            os: ubuntu-18.04
            compiler: clang
            version: "6.0"

          - name: ubuntu-18.04-clang-7
            os: ubuntu-18.04
            compiler: clang
            version: "7"

          - name: ubuntu-18.04-clang-8
            os: ubuntu-18.04
            compiler: clang
            version: "8"

          - name: ubuntu-18.04-clang-9
            os: ubuntu-18.04
            compiler: clang
            version: "9"

          - name: ubuntu-18.04-clang-10
            os: ubuntu-18.04
            compiler: clang
            version: "10"

          # Windows

          # - name: windows-latest-cl-vs2015
          #   os: windows-latest
          #   compiler: cl
          #   version: "14.0"

          # - name: windows-latest-cl-vs2017
          #   os: windows-latest
          #   compiler: cl
          #   version: "14.16"

          # - name: windows-latest-cl-vs2019
          #   os: windows-latest
          #   compiler: cl
          #   version: latest

          # - name: windows-latest-clang-cl
          #   os: windows-latest
          #   compiler: clang-cl

          # - name: windows-latest-clang
          #   os: windows-latest
          #   compiler: clang

          # - name: windows-latest-gcc
          #   os: windows-latest
          #   compiler: gcc

          # macOS

          - name: macOS-latest-xcode-10.3
            os: macOS-latest
            compiler: xcode
            version: "10.3"

          - name: macOS-latest-xcode-11.2
            os: macOS-latest
            compiler: xcode
            version: "11.2"

          - name: macOS-latest-xcode-11.3
            os: macOS-latest
            compiler: xcode
            version: "11.3"

          - name: macOS-latest-xcode-12.3
            os: macOS-latest
            compiler: xcode
            version: "12.3"

    steps:
      - uses: actions/checkout@v1
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install (Linux)
        if: runner.os == 'Linux'
        run: |
          # CMake 3.15 allows specifying the generator using the CMAKE_GENERATOR
          # environment variable.
          curl -sSL https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4-Linux-x86_64.tar.gz -o cmake.tar.gz
          sudo tar xf cmake.tar.gz --strip 1 -C /usr/local
          # Required for libc6-dbg:i386 and g++-multilib packages which are
          # needed for x86 builds.
          sudo dpkg --add-architecture i386
          # clang-3.7 and earlier are not available in Bionic anymore so we get
          # them from the Xenial repositories instead.
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial main"
          sudo add-apt-repository "deb http://dk.archive.ubuntu.com/ubuntu/ xenial universe"
          sudo apt-get update
          # libc6-dbg:i386 is required for running valgrind on x86.
          sudo apt-get install -y ninja-build valgrind libc6-dbg:i386
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            sudo apt-get install -y g++-${{ matrix.version }} g++-${{ matrix.version }}-multilib
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            sudo apt-get install -y clang-${{ matrix.version }} g++-multilib
            echo "CC=clang-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=clang++-${{ matrix.version }}" >> $GITHUB_ENV
          fi

      - name: Install (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install cmake ninja
          if [ "${{ matrix.compiler }}" = "gcc" ]; then
            brew install gcc@${{ matrix.version }}
            echo "CC=gcc-${{ matrix.version }}" >> $GITHUB_ENV
            echo "CXX=g++-${{ matrix.version }}" >> $GITHUB_ENV
          else
            ls -ls /Applications/
            sudo xcode-select -switch /Applications/Xcode_${{ matrix.version }}.app
            echo "CC=clang" >> $GITHUB_ENV
            echo "CXX=clang++" >> $GITHUB_ENV
          fi

      - name: Install (Windows)
        if: runner.os == 'Windows'
        shell: powershell
        run: |
          Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
          scoop install ninja --global
          if ("${{ matrix.compiler }}".StartsWith("clang")) {
            scoop install llvm --global
          }
          if ("${{ matrix.compiler }}" -eq "gcc") {
            scoop install gcc --global
            echo "CC=gcc" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "CXX=g++" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } elseif ("${{ matrix.compiler }}" -eq "clang") {
            echo "CC=clang" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "CXX=clang++" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          } else {
            echo "CC=${{ matrix.compiler }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "CXX=${{ matrix.compiler }}" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }
          # Scoop modifies the PATH so we make the modified PATH global.
          echo $env:PATH.split(';') | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          ninja --version

      - name: Install Conan
        run: |
          python -m pip install --upgrade pip
          pip install conan
          conan --version

      - name: Configure x64
        if: runner.os == 'Windows'
        run: |
          if ("${{ matrix.version }}" -eq "latest") {
            .github\workflows\vsenv.bat -arch=x64 -host_arch=x64
          } else {
            .github\workflows\vsenv.bat -arch=x64 -host_arch=x64 -vcvars_ver="${{ matrix.version }}"
          }

      - name: Build & Test Debug x64
        run: |
          ninja --version
          cmake -E remove_directory build
          mkdir build
          cd build
          conan install ..
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DRESULT_COMPILE_UNIT_TESTS=On -GNinja
          cmake --build .
          ctest

      - name: Build & Test Release x64
        run: |
          cmake -E remove_directory build
          mkdir build
          cd build
          conan install ..
          cmake .. -DCMAKE_BUILD_TYPE=Release -DRESULT_COMPILE_UNIT_TESTS=On -GNinja
          cmake --build .
          ctest

      - name: Configure x86
        shell: pwsh
        if: (runner.os == 'Windows' && matrix.compiler != 'gcc') || runner.os == 'Linux'
        run: |
          if ("${{ runner.os }}" -eq "Windows") {
            if ("${{ matrix.version }}" -eq "latest") {
              .github\workflows\vsenv.bat -arch=x86 -host_arch=x64
            } else {
              .github\workflows\vsenv.bat -arch=x86 -host_arch=x64 -vcvars_ver="${{ matrix.version }}"
            }

          }
          if ("${{ matrix.compiler }}" -notcontains "cl") {
            echo "CXXFLAGS=$CXXFLAGS -m32" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          }

      - name: Build & Test Debug x86
        if: (runner.os == 'Windows' && matrix.compiler != 'gcc') || runner.os == 'Linux'
        run: |
          cmake -E remove_directory build
          mkdir build
          cd build
          conan install ..
          cmake .. -DCMAKE_BUILD_TYPE=Debug -DRESULT_COMPILE_UNIT_TESTS=On
          cmake --build .
          ctest

      - name: Build & Test Release x86
        if: (runner.os == 'Windows' && matrix.compiler != 'gcc') || runner.os == 'Linux'
        run: |
          cmake -E remove_directory build
          mkdir build
          cd build
          conan install ..
          cmake .. -DCMAKE_BUILD_TYPE=Release -DRESULT_COMPILE_UNIT_TESTS=On
          cmake --build .
          ctest
